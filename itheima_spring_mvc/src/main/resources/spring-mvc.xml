<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

    <!--
        第一种配置扫描方式
            配置注解扫描基础包
            这里面, 只扫描controller下面的注解. 因为spring-mvc.xml文件只是给web层使用的. 所以只扫描controller包下面的注解.
            这也是解耦思想. 其他的DAO service 放到applicationContext.xml文件扫描.
     -->
    <context:component-scan  base-package="com.itheima.controller"/>

    <!-- 第二种配置扫描方式 -->
    <context:component-scan base-package="com.itheima" >
        <!-- 这个标签表示的是, 扫描itheima包下面的 注解类型的 controller. 就是controller类型注解 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <!-- 这个就是不扫描itheima包下面的@Service类型注解 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>


    <!-- 这里面可以对 内部资源视图解析器InternalResourceViewResolve 注入其两个成员变量 这样在 <转发> 操作时更简洁 -->
    <!--<bean id="viewResolve" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
        <property name="prefix" value="/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>-->

    <!-- 配置处理器映射器 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
    </bean>-->

    <!-- 配置处理器中的映射器的代码太长了 改成mvc注解驱动(需要mvc命名空间) -->
    <mvc:annotation-driven />

    <!--
        第一种方式加载静态资源(这种方式比较繁琐 无论啥样的资源都得配置一遍)
        开放某些资源的访问权限
        mapping元素: 代表映射地址. 就是url映射的地址. 浏览器访问的时候的路径
        location元素: 表示资源具体的目录. 而目录必须匹配资源. 文件夹的路径
    -->
    <!--<mvc:resources mapping="/static/script/**" location="/static/script/" />-->

    <!--
        第二种静态资源配置方式(这种简洁)
        配置上原始servlet, 即tomcat容器去寻找静态资源
     -->
    <mvc:default-servlet-handler />



</beans>
