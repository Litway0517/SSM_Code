<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/spring_test"/>
        <property name="user" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--<bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>-->


    <!--
        配置目标对象  内部的方法就是切点. 所谓的目标对象, 就是为了完成业务的方法
        对 AccountServiceImpl 进行增强.
    -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>-->


    <!-- 自定义的包和类, 一般使用注解开发. 非自定义的类或包使用配置文件注入spring -->
    <context:component-scan base-package="com.itheima.service" />
    <context:component-scan base-package="com.itheima.dao" />

    <!-- 配置  平台事务管理器(究竟使用myBatis或者还是hibernate, JDBC) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
        <!--
            transaction底层会从dataSource中获取connection进行事务管理
            使用JdbcTemplate模板进行事务控制时, 底层就是简单的对jdbc进行封装. 因此, JDBC还是需要dataSource才能运行.
            这里需要注入一个变量.
        -->
        <property name="dataSource" ref="dataSource" />
    </bean>


    <!-- 开启事务配置 -->
    <tx:annotation-driven transaction-manager="transactionManager" />


    <!-- 配置通知  通知就是增强  这里的增强是事务控制. 事务控制来增强业务方法 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager" >
        &lt;!&ndash;
            这里时设置事物的属性信息:
                1- 事务的隔离级别                   isolation: 隔离级别
                2- 事务的传播行为(两个事务之间)       propagation: 传播行为
                3- 事务的超时行为                   timeout: 超时时间
                4- 只读?                          read-only: 仅仅读取
        &ndash;&gt;
        <tx:attributes>
            &lt;!&ndash;
                tx:method标签: 对不同的方法进行不同的事务管理. 配置增强该方法时的事务参数.
                为方法指定相关参数. 参数就是上面的那些. *表示所有方法
            &ndash;&gt;
            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>

            <tx:method name="save" isolation="REPEATABLE_READ" propagation="REQUIRED"  read-only="false"/>
            <tx:method name="findAll" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="-1" read-only="false"/>

            &lt;!&ndash; update开头的方法 &ndash;&gt;
            <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" timeout="-1" read-only="false"/>
        </tx:attributes>
    </tx:advice>


    &lt;!&ndash; 当目标对象和通知, 均配置完成时, 需要将两者织入 &ndash;&gt;
    <aop:config>
        &lt;!&ndash;
            普通的业务增强, 使用aop:aspect就好了
            这里的, aop:advisor是专门用于, 使用事务对业务进行增强的标签.

            这里面又进行了一次抽取(抽取相同代码).
        &ndash;&gt;
        <aop:pointcut id="txPointcut" expression="execution(* com.itheima.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>
    -->




</beans>
