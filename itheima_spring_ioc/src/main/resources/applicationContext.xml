<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
        ==================================================
        下面为了测试方便, 又不注掉每一个bean标签的配置,
        所以均使用了prototype方式, 否则容器创建的同事就会创建Bean
        ==================================================

    -->


    <!--
        配置bean
        下面这种配置, spring回去找Bean对应的无参构造方法
        当没有定义构造方法时每个类里都有一个默认的无参的构造方法，此时该类就只有一个构造方法;
        而当你显示定义类的构造方法时，那就没有那个默认的构造方法了，该类所以的构造方法就是定义了的那些构造方法;
     -->
    <bean id="userDao" class="com.itheima.dao.impl.UserDaoImpl" scope="prototype"
          init-method="init" destroy-method="destroy"
    />

    <!-- 为了测试这里面的创建时机, 我们去复写UserDaoImpl中的构造方法 -->


    <!-- 静态工厂创建 -> 这个是singleton模式 所以会自动创建(改成了prototype模式) -->
    <bean id="userDao2" class="com.itheima.factory.StaticFactory" factory-method="getUserDao" scope="prototype" />


    <!--
        工厂配置实例 -> 先配置工厂的bean, 再配置对象
        factory-bean -> 该参数用来标识具体指的是哪一个工厂.
        factory-method -> 当找到了工厂是, 再去该工厂内部找方法.
        去哪一个工厂找哪一个方法.
    -->
    <bean id="factory" class="com.itheima.factory.DynamicFactory" />
    <bean id="userDao3" factory-bean="factory" factory-method="getUserDao" scope="prototype"/>


    <!-- 重新配置一个userDao -> 解耦service层调用DAO层时的实例化 -->
    <bean id="userDaoNew" class="com.itheima.dao.impl.UserDaoImpl" scope="prototype" />
    <!-- 再配置一个userService  解耦controller层调用service层时的实例化 -->
    <bean id="userService" class="com.itheima.service.impl.UserServiceImpl" scope="prototype" />







</beans>
